generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum MediaType {
  IMAGE
  VIDEO
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  OUTOFDELIVERY
  DELIVERED
  CANCELLED
  RETURNED
  REFUNDED
}

model User {
  id            String       @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String       @unique
  emailVerified DateTime?
  image         String?
  password      String?
  dob           DateTime?
  mobileNumber  String?
  accounts      Account[]
  orders        Order[]
  addresses     Address[]
  comments      Comment[]
  usedCoupons   CouponUser[] @relation("CouponUser")
  stores        Store[]      @relation("UserToStore")
  wishlists     Wishlist[]
  reviews       Review[]     @relation("UserToReview")
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Address {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  userId      String   @db.ObjectId
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  isDefault   Boolean  @default(true)
  name        String
  phoneNumber String
  zipCode     Int
  address     String
  landmark    String
  town        String
  district    String
  state       String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model VerificationToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model ResetPasswordToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model Wishlist {
  id        String         @id @default(auto()) @map("_id") @db.ObjectId
  userId    String         @db.ObjectId
  user      User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  items     WishlistItem[]
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt

  @@unique([userId])
}

model WishlistItem {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  wishlistId String   @db.ObjectId
  productId  String   @db.ObjectId
  wishlist   Wishlist @relation(fields: [wishlistId], references: [id], onDelete: Cascade)
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([wishlistId, productId])
}

model Order {
  id                    String           @id @default(auto()) @map("_id") @db.ObjectId
  storeId               String           @db.ObjectId
  store                 Store            @relation("StoreToOrder", fields: [storeId], references: [id], onDelete: Cascade)
  userId                String?          @db.ObjectId
  user                  User?            @relation(fields: [userId], references: [id], onDelete: SetNull)
  isPaid                Boolean          @default(false)
  isCompleted           Boolean          @default(false)
  couponId              String?          @db.ObjectId
  orderProducts         OrderProduct[]
  shippingId            String?          @db.ObjectId
  shippingAddress       ShippingAddress? @relation(fields: [shippingId], references: [id], onDelete: SetNull)
  orderNumber           String?          @unique
  invoiceNumber         String?          @unique
  mrp                   Float?
  price                 Float?
  discount              Float?           @default(0)
  paymentMethod         String?
  phone                 String           @default("")
  address               String?
  gstNumber             String?
  status                OrderStatus      @default(PENDING)
  estimatedDeliveryDays Int?             @default(3)
  customerName          String?
  customerEmail         String?
  zipCode               String?
  createdAt             DateTime         @default(now())
  updatedAt             DateTime         @updatedAt

  @@index([storeId, userId])
}

model Comment {
  id             String       @id @default(auto()) @map("_id") @db.ObjectId
  comment        String?
  star           Int?
  productId      String       @db.ObjectId
  product        Product      @relation(fields: [productId], references: [id], onDelete: Cascade)
  userId         String       @db.ObjectId
  username       String
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  orderProductId String       @unique @db.ObjectId
  orderProduct   OrderProduct @relation(fields: [orderProductId], references: [id], onDelete: Cascade)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  @@unique([userId, productId, orderProductId])
}

model OrderProduct {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  orderId      String   @db.ObjectId
  variantId    String   @db.ObjectId
  name         String
  about        String?
  slug         String?
  size         String?
  color        String?
  mrp          Float
  price        Float
  productImage String?
  isCancelled  Boolean  @default(false)
  quantity     Int
  comment      Comment?
  order        Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  variant      Variant  @relation(fields: [variantId], references: [id], onDelete: Restrict)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@index([orderId, variantId])
}

model ShippingAddress {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  mobileNumber String
  zipCode      Int
  address      String
  landmark     String
  town         String
  district     String
  state        String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  orders Order[]
}

model Store {
  id                  String               @id @default(auto()) @map("_id") @db.ObjectId
  name                String
  userId              String               @db.ObjectId
  user                User                 @relation("UserToStore", fields: [userId], references: [id], onDelete: Cascade)
  categories          Category[]           @relation("StoreToCategory")
  subCategories       SubCategory[]        @relation("StoreToSubCategory")
  sizes               Size[]               @relation("StoreToSize")
  colors              Color[]              @relation("StoreToColor")
  products            Product[]            @relation("StoreToProduct")
  orders              Order[]              @relation("StoreToOrder")
  specificationGroups SpecificationGroup[] @relation("StoreToSpecificationGroup")
  specificationFields SpecificationField[] @relation("StoreToSpecificationField")
  locationGroups      LocationGroup[]      @relation("StoreToLocationGroup")
  brands              Brand[]              @relation("StoreToBrand")
  coupons             Coupon[]             @relation("StoreToCoupon")
  locations           Location[]           @relation("StoreToLocation")
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt

  @@index([userId])
}

model LocationGroup {
  id                  String         @id @default(auto()) @map("_id") @db.ObjectId
  storeId             String         @db.ObjectId
  store               Store          @relation("StoreToLocationGroup", fields: [storeId], references: [id], onDelete: Cascade)
  name                String
  isCodAvailable      Boolean        @default(false)
  isExpressDelivery   Boolean?       @default(false)
  deliveryDays        Int?           @default(1)
  expressDeliveryText String?
  locations           Location[]     @relation("LocationGroupToLocation")
  variantPrices       VariantPrice[] @relation("LocationGroupToVariantPrice")
  createdAt           DateTime       @default(now())
  updatedAt           DateTime       @updatedAt

  @@index([storeId])
}

model Location {
  id              String         @id @default(auto()) @map("_id") @db.ObjectId
  storeId         String         @db.ObjectId
  store           Store          @relation("StoreToLocation", fields: [storeId], references: [id], onDelete: Cascade)
  locationGroupId String?        @db.ObjectId
  locationGroup   LocationGroup? @relation("LocationGroupToLocation", fields: [locationGroupId], references: [id], onDelete: Cascade)
  pincode         String         @unique
  city            String
  state           String
  country         String
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt

  @@unique([storeId, pincode, city, state, country])
  @@index([storeId, locationGroupId])
}

model VariantPrice {
  id              String        @id @default(auto()) @map("_id") @db.ObjectId
  variantId       String        @db.ObjectId
  variant         Variant       @relation("VariantToVariantPrice", fields: [variantId], references: [id], onDelete: Cascade)
  locationGroupId String        @db.ObjectId
  locationGroup   LocationGroup @relation("LocationGroupToVariantPrice", fields: [locationGroupId], references: [id], onDelete: Cascade)
  price           Int           @default(0)
  mrp             Int           @default(0)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  @@unique([variantId, locationGroupId])
}

model SpecificationGroup {
  id                  String               @id @default(auto()) @map("_id") @db.ObjectId
  storeId             String               @db.ObjectId
  store               Store                @relation("StoreToSpecificationGroup", fields: [storeId], references: [id], onDelete: Cascade)
  name                String
  specificationFields SpecificationField[] @relation("GroupToSpecificationField")
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt

  @@index([storeId])
}

model SpecificationField {
  id                    String                 @id @default(auto()) @map("_id") @db.ObjectId
  storeId               String                 @db.ObjectId
  store                 Store                  @relation("StoreToSpecificationField", fields: [storeId], references: [id], onDelete: Cascade)
  groupId               String                 @db.ObjectId
  group                 SpecificationGroup     @relation("GroupToSpecificationField", fields: [groupId], references: [id], onDelete: Cascade)
  name                  String
  variantSpecifications VariantSpecification[] @relation("FieldToVariantSpecification")
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt

  @@index([storeId, groupId])
}

model VariantSpecification {
  id                   String             @id @default(auto()) @map("_id") @db.ObjectId
  variantId            String             @db.ObjectId
  variant              Variant            @relation("VariantToVariantSpecification", fields: [variantId], references: [id], onDelete: Cascade)
  specificationFieldId String             @db.ObjectId
  specificationField   SpecificationField @relation("FieldToVariantSpecification", fields: [specificationFieldId], references: [id], onDelete: Cascade)
  value                String
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt

  @@index([variantId, specificationFieldId])
}

model Category {
  id                String        @id @default(auto()) @map("_id") @db.ObjectId
  storeId           String        @db.ObjectId
  store             Store         @relation("StoreToCategory", fields: [storeId], references: [id], onDelete: Cascade)
  products          Product[]     @relation("CategoryToProduct")
  subCategories     SubCategory[] @relation("CategoryToSubCategory")
  name              String
  slug              String        @unique
  bannerImage       String
  landingPageBanner String?
  description       String?
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt

  @@index([storeId])
}

model SubCategory {
  id                 String        @id @default(auto()) @map("_id") @db.ObjectId
  storeId            String        @db.ObjectId
  store              Store         @relation("StoreToSubCategory", fields: [storeId], references: [id], onDelete: Cascade)
  categoryId         String        @db.ObjectId
  category           Category      @relation("CategoryToSubCategory", fields: [categoryId], references: [id], onDelete: Cascade)
  parentId           String?       @db.ObjectId
  parent             SubCategory?  @relation("SubCategoryToChildSubCategory", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  childSubCategories SubCategory[] @relation("SubCategoryToChildSubCategory")
  products           Product[]     @relation("SubCategoryToProduct")
  slug               String        @unique
  name               String
  bannerImage        String
  description        String?
  reviewCategories   Json[]        @default([])
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt
  icon               String?

  @@index([storeId, categoryId, parentId])
}

model Size {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  storeId   String    @db.ObjectId
  store     Store     @relation("StoreToSize", fields: [storeId], references: [id], onDelete: Cascade)
  name      String
  value     String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  variants  Variant[]

  @@index([storeId])
}

model Color {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  storeId   String    @db.ObjectId
  store     Store     @relation("StoreToColor", fields: [storeId], references: [id], onDelete: Cascade)
  name      String
  value     String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  variants  Variant[]

  @@index([storeId])
}

model Brand {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  storeId     String    @db.ObjectId
  store       Store     @relation("StoreToBrand", fields: [storeId], references: [id], onDelete: Cascade)
  name        String
  slug        String    @unique
  bannerImage String
  description String?
  cardImage   String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  products    Product[] @relation("BrandToProduct")

  @@index([storeId])
}

model Product {
  id              String          @id @default(auto()) @map("_id") @db.ObjectId
  storeId         String          @db.ObjectId
  store           Store           @relation("StoreToProduct", fields: [storeId], references: [id], onDelete: Cascade)
  categoryId      String?         @db.ObjectId
  category        Category?       @relation("CategoryToProduct", fields: [categoryId], references: [id], onDelete: Restrict)
  subCategoryId   String?         @db.ObjectId
  subCategory     SubCategory?    @relation("SubCategoryToProduct", fields: [subCategoryId], references: [id], onDelete: SetNull, onUpdate: NoAction)
  brandId         String?         @db.ObjectId
  brand           Brand?          @relation("BrandToProduct", fields: [brandId], references: [id], onDelete: SetNull)
  sizeAndFit      String[]
  materialAndCare String[]
  enabledFeatures String?
  expressDelivery Boolean         @default(false)
  warranty        String?
  isFeatured      Boolean         @default(false)
  isArchieved     Boolean         @default(false)
  isNewArrival    Boolean         @default(false)
  reviews         Review[]        @relation("ProductToReview")
  comments        Comment[]
  wishlists       WishlistItem[]
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  variants        Variant[]
  coupons         CouponProduct[] @relation("ProductToCoupon")

  @@index([categoryId, subCategoryId, storeId, brandId])
}

model Review {
  id              String                 @id @default(auto()) @map("_id") @db.ObjectId
  productId       String                 @db.ObjectId
  product         Product                @relation("ProductToReview", fields: [productId], references: [id], onDelete: Cascade)
  userId          String                 @db.ObjectId
  user            User                   @relation("UserToReview", fields: [userId], references: [id], onDelete: Cascade)
  userName        String
  rating          Int
  text            String
  images          ReviewImage[]          @relation("ReviewToReviewImage")
  videos          ReviewVideo[]          @relation("ReviewToReviewVideo")
  categoryRatings ReviewCategoryRating[] @relation("ReviewToCategoryRating")
  createdAt       DateTime               @default(now())
  updatedAt       DateTime               @updatedAt

  @@index([productId, userId])
}

model ReviewCategoryRating {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  reviewId     String   @db.ObjectId
  review       Review   @relation("ReviewToCategoryRating", fields: [reviewId], references: [id], onDelete: Cascade)
  categoryName String
  rating       Int
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@index([reviewId])
}

model ReviewImage {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  reviewId  String   @db.ObjectId
  review    Review   @relation("ReviewToReviewImage", fields: [reviewId], references: [id], onDelete: Cascade)
  url       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([reviewId])
}

model ReviewVideo {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  reviewId  String   @db.ObjectId
  review    Review   @relation("ReviewToReviewVideo", fields: [reviewId], references: [id], onDelete: Cascade)
  url       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([reviewId])
}

model Variant {
  id                    String                 @id @default(auto()) @map("_id") @db.ObjectId
  productId             String                 @db.ObjectId
  product               Product                @relation(fields: [productId], references: [id], onDelete: Cascade)
  sizeId                String?                @db.ObjectId
  size                  Size?                  @relation(fields: [sizeId], references: [id], onDelete: SetNull)
  colorId               String?                @db.ObjectId
  color                 Color?                 @relation(fields: [colorId], references: [id], onDelete: SetNull)
  stock                 Int                    @default(0)
  images                VariantImage[]
  sku                   String?                @unique
  hsn                   String?
  tax                   Float?                 @default(0)
  gstIn                 String?
  name                  String
  slug                  String                 @unique
  about                 String?
  description           String
  metaTitle             String?
  metaDescription       String?
  metaKeywords          String[]               @default([])
  openGraphImage        String?
  variantSpecifications VariantSpecification[] @relation("VariantToVariantSpecification")
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  orderProducts         OrderProduct[]
  variantPrices         VariantPrice[]         @relation("VariantToVariantPrice")

  @@index([productId, sizeId, colorId])
}

model VariantImage {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  variantId String    @db.ObjectId
  variant   Variant   @relation(fields: [variantId], references: [id], onDelete: Cascade)
  url       String
  mediaType MediaType @default(IMAGE)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([variantId])
}

model Coupon {
  id           String          @id @default(auto()) @map("_id") @db.ObjectId
  storeId      String          @db.ObjectId
  store        Store           @relation("StoreToCoupon", fields: [storeId], references: [id], onDelete: Cascade)
  code         String          @unique
  value        Float
  startDate    DateTime
  expiryDate   DateTime
  products     CouponProduct[] @relation("CouponToProduct")
  usagePerUser Int             @default(1)
  usedCount    Int             @default(0)
  usedBy       CouponUser[]    @relation("CouponToUser")
  description  String?
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
  isActive     Boolean         @default(true)

  @@index([storeId])
}

model CouponProduct {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  couponId  String   @db.ObjectId
  coupon    Coupon   @relation("CouponToProduct", fields: [couponId], references: [id], onDelete: Cascade)
  productId String   @db.ObjectId
  product   Product  @relation("ProductToCoupon", fields: [productId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([couponId, productId])
}

model CouponUser {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  couponId  String   @db.ObjectId
  coupon    Coupon   @relation("CouponToUser", fields: [couponId], references: [id], onDelete: Cascade)
  userId    String   @db.ObjectId
  user      User     @relation("CouponUser", fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([couponId, userId])
}
